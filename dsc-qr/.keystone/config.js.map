{
  "version": 3,
  "sources": ["../keystone.ts", "../schema.ts", "../auth.ts"],
  "sourcesContent": ["// Welcome to Keystone!\n//\n// This file is what Keystone uses as the entry-point to your headless backend\n//\n// Keystone imports the default export of this file, expecting a Keystone configuration object\n//   you can find out more at https://keystonejs.com/docs/apis/config\n\nimport {config} from '@keystone-6/core';\n\n// to keep this file tidy, we define our schema in a different file\nimport {lists} from './schema';\n\n// authentication is configured separately here too, but you might move this elsewhere\n// when you write your list-level access control functions, as they typically rely on session data\nimport {session, withAuth} from './auth';\n\nexport default withAuth(\n    config({\n        db: {\n            // we're using sqlite for the fastest startup experience\n            //   for more information on what database might be appropriate for you\n            //   see https://keystonejs.com/docs/guides/choosing-a-database#title\n            provider: 'sqlite',\n            url: 'file:./keystone.db',\n        },\n        lists,\n        session,\n        server: {\n            cors: {\n                origin: (_: string, callback: (arg0: null, arg1: boolean) => void) => callback(null, true)\n            }\n        }\n    })\n);\n", "// Welcome to your schema\n//   Schema driven development is Keystone's modus operandi\n//\n// This file is where we define the lists, fields and hooks for our data.\n// If you want to learn more about how lists are configured, please read\n// - https://keystonejs.com/docs/config/lists\n\nimport {graphql, list} from '@keystone-6/core';\nimport {allowAll} from '@keystone-6/core/access';\n\n// see https://keystonejs.com/docs/fields/overview for the full list of fields\n//   this is a few common fields for an example\nimport {json, password, relationship, text, timestamp, virtual,} from '@keystone-6/core/fields';\n\n// the document field is a more complicated field, so it has it's own package\n// if you want to make your own fields, see https://keystonejs.com/docs/guides/custom-fields\n// when using Typescript, you can refine your types to a stricter subset by importing\n// the generated types from '.keystone/types'\nimport type {Lists} from '.keystone/types';\n\nexport const lists: Lists = {\n    User: list({\n        // WARNING\n        //   for this starter project, anyone can create, query, update and delete anything\n        //   if you want to prevent random people on the internet from accessing your data,\n        //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n        access: allowAll,\n\n        // this is the fields for our User list\n        fields: {\n            // by adding isRequired, we enforce that every User should have a name\n            //   if no name is provided, an error will be displayed\n            name: text({validation: {isRequired: true}, isIndexed: 'unique'}),\n\n            password: password({validation: {isRequired: true}}),\n\n            createdAt: timestamp({\n                // this sets the timestamp to Date.now() when the user is first created\n                defaultValue: {kind: 'now'},\n            }),\n        },\n    }),\n    Survey: list({\n        access: allowAll,\n        fields: {\n            name: virtual({\n                field: graphql.field({\n                    type: graphql.String,\n                    resolve: (data) => {\n                        if (data.form) {\n                            const title = JSON.parse(data.form).title;\n                            return typeof title === 'string'\n                                ? title : title && 'default' in title\n                                    ? title.default : \"\";\n                        } else {\n                            return \"\"\n                        }\n                    }\n                }),\n                ui: {\n                    itemView: {\n                        fieldMode: 'read',\n                        fieldPosition: 'sidebar'\n                    }\n                }\n            }),\n            form: json({\n                ui: {\n                    views: './survey-creator'\n                }\n            }),\n            link: virtual({\n                field: graphql.field({\n                    type: graphql.String,\n                    resolve: item => `http://localhost:3001/${item.id}` // for now\n                }),\n                label: 'QR Code',\n                ui: {\n                    views: './qr-code',\n                    itemView: {\n                        fieldPosition: 'sidebar',\n                        fieldMode: 'read'\n                    },\n                    createView: {\n                        fieldMode: 'hidden'\n                    },\n                    listView: {\n                        fieldMode: 'hidden'\n                    }\n                }\n            }),\n            submissions: relationship({\n                ref: 'Submission.survey',\n                many: true,\n                ui: {\n                    displayMode: 'count'\n                }\n            }),\n        }\n    }),\n    Submission: list({\n        access: allowAll,\n        ui: {\n            labelField: 'createdAt'\n        },\n        fields: {\n            survey: relationship({ref: 'Survey.submissions'}),\n            response: json(),\n            createdAt: timestamp({\n                defaultValue: {kind: 'now'}, ui: {\n                    itemView: {\n                        fieldMode: 'read',\n                        fieldPosition: 'sidebar'\n                    }\n                }\n            })\n        }\n    })\n};\n", "// Welcome to some authentication for Keystone\n//\n// This is using @keystone-6/auth to add the following\n// - A sign-in page for your Admin UI\n// - A cookie-based stateless session strategy\n//    - Using a User email as the identifier\n//    - 30 day cookie expiration\n//\n// This file does not configure what Users can do, and the default for this starter\n// project is to allow anyone - logged-in or not - to do anything.\n//\n// If you want to prevent random people on the internet from accessing your data,\n// you can find out how by reading https://keystonejs.com/docs/guides/auth-and-access-control\n//\n// If you want to learn more about how our out-of-the-box authentication works, please\n// read https://keystonejs.com/docs/apis/auth#authentication-api\n\nimport { randomBytes } from 'crypto';\nimport { createAuth } from '@keystone-6/auth';\n\n// see https://keystonejs.com/docs/apis/session for the session docs\nimport { statelessSessions } from '@keystone-6/core/session';\n\n// for a stateless session, a SESSION_SECRET should always be provided\n//   especially in production (statelessSessions will throw if SESSION_SECRET is undefined)\nlet sessionSecret = process.env.SESSION_SECRET;\nif (!sessionSecret && process.env.NODE_ENV !== 'production') {\n  sessionSecret = randomBytes(32).toString('hex');\n}\n\n// withAuth is a function we can use to wrap our base configuration\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'name',\n\n  // this is a GraphQL query fragment for fetching what data will be attached to a context.session\n  //   this can be helpful for when you are writing your access control functions\n  //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n  sessionData: 'name createdAt',\n  secretField: 'password',\n\n  // WARNING: remove initFirstItem functionality in production\n  //   see https://keystonejs.com/docs/config/auth#init-first-item for more\n  initFirstItem: {\n    // if there are no items in the database, by configuring this field\n    //   you are asking the Keystone AdminUI to create a new user\n    //   providing inputs for these fields\n    fields: ['name', 'password'],\n\n    // it uses context.sudo() to do this, which bypasses any access control you might have\n    //   you shouldn't use this in production\n  },\n});\n\n// statelessSessions uses cookies for session tracking\n//   these cookies have an expiry, in seconds\n//   we use an expiry of 30 days for this starter\nconst sessionMaxAge = 60 * 60 * 24 * 30;\n\n// you can find out more at https://keystonejs.com/docs/apis/session#session-api\nconst session = statelessSessions({\n  maxAge: sessionMaxAge,\n  secret: sessionSecret!,\n});\n\nexport { withAuth, session };\n"],
  "mappings": "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",
  "names": ["import_core"]
}
